디렉터리는 2가지를 가지고 있다.
1)아이노드 번호
2)파일명

기본적으로는 파일을 실행시 실행자의 권한으로 파일이 실행되나
Set-UID가 설정되어있는 (s,s,t)의 경우 파일을 실행한 소유자와 상관없이 
셋팅되어있는 소유자의 권한으로 실행하는 권한

기본적으로는 파일을 실행시 실행자의 그룹 권한으로 파일이 실행되나
Set-GID가 설정되어있는 (s,s,t)의 경우 파일을 실행한 소유자와 상관없이 
셋팅되어있는 소유자의 그룹 권한으로 실행하는 권한

octal로 소유권 변경시
'0'000 = 아무런 특수 권한x
'1'000 = --------T 스티키비트 권한 추가
'2'000 = -----S--- setGID 권한 추가
'3'000 = -----S--T 스티키비트와 setGID권한 추가
'4'000 = --S------ setUID 권한 추가
'5'000 = --S-----T setUID 권한과 스티키비트 권한추가
'6'000 = --S--S--- setUID, setGID 권한 추가
'7'000 = --S--S--T 모든 특수 권한 추가
[이 때 특수권한 문자가 대문자인 이유는 다른 소유권자들의 x권한이 없기 때문에.
만약 소원권자들이 x권한을 가지고 있었다면(0111) 특수권한 문자는 소문자가 된다.]

# echo 1 | passwd --stdin linux
echo 1 = 1을 출력하라 |(명령어와 명령어 사이의 구분자)
출력한 1을 linux의 패스워드로 입력


# useradd 유저이름
= 일반 유저 유저이름 생성

# su - 유저이름
= 유저이름으로 계정 전환
# su 유저이름
= 유저이름으로 터미널은 변경하지만 완전한 계정전환은 아니다.
환경설정이 기존 계정 그대로인 채로 계정 전환

# id 
= 현재 사용중인 계정의 정보(uid, gid, groups)를 출력


---------------------------------------------------
02.23
>>> 체크리스트 <<<

o 파일에서 퍼미션 r의 의미는 무엇인가? 
읽기

o 파일에서 퍼미션 w의 의미는 무엇인가? 
쓰고 고치기, 삭제

o 파일에서 퍼미션 x의 의미는 무엇인가? 
실행이나 크게 의미가 없다.

o 실행할 수 있는 파일의 종류는 어떤 것이 있는가? 
[바이너리 파일, 스크립트파일(txt(e.g /etc/shadow))]

o 디렉터리에서 퍼미션 r의 의미는 무엇인가?
읽기[파일의 리스트를 볼 수 있음(ls)]

o 디렉터리에서 퍼미션 w의 의미는 무엇인가?
생성과 수정, 삭제

o 디렉터리에서 퍼미션 x의 의미는 무엇인가?
디렉터리를 여는 권한[접근권한]

o 아래 파일의 허가권을 심볼릭 모드와 8진수 모드로 변경하시오.
# touch perm.txt
# ll perm.txt
-rw-r--r--. 1 root root 0  2월 23 12:58 perm.txt
 644

   현재 권한   변경할 권한   심볼릭 모드    8진수 모드
-rw-r--r-- -> -rwxr--r--     u+x           744  
-rwxr--r-- -> -rwxr-xr--     g+x           754  
-rwxr-xr-- -> -rw-------     a-x,go-r     600
                             u-x,go=
-rw------- -> -r--------     u-w           400
                             u=r

o 아래 명령어들의 역할은 무엇인가? 
  . chmod 파일의 퍼미션을 변경
  . chown 파일의 소유권자와 소유권자그룹을 변경
  . chgrp 파일의 소유권자그룹을 변경

o chmod 명령어에서 심볼릭 모드란 무엇인가? 
a,u,g,o,+,-,=등의 기호를 사용해 퍼미션을 변경하는 것

o chmod 명령어에서 8진수 모드란 무엇인가? 
8진수를 이용해 umask에 저장된 숫자를 기준으로 0~7까지의 숫자로 퍼미션을 변경하는것

o 심볼릭 모드에서 사용할 수 있는 문자는 무엇인가?
a,u,g,o,s,S,t,T,+,-,= ,r,w,x

o 8진수 모드에서 사용할 수 있는 값은 무엇인가?
1,2,3,4,5,6,7,0 까지의 숫자

o Set-UID 란 무엇인가?
설정이 되어있으면 파일을 실행할때 해당 파일의 소유권자가 아니여도 소유권자의 권한을 빌려와서 파일을 사용할 수 있다.
---s-----x. 1 root root  ... cat 실행 O
---S-----x. 1 root root  ... cat 실행 O

---s------. 1 root root  ... cat 실행 X
---S------. 1 root root  ... cat 실행 X

o Set-GID 란 무엇인가?
설정이 되어있으면 파일을 실행할때 해당 파일의 소유권자그룹이 아니여도 소유권자그룹의 권한을 빌려와서 파일을 사용할 수 있다.
------s--x. 1 root user1  ... cat 실행 O
------S--x. 1 root user1  ... cat 실행 O

------s---. 1 root user1  ... cat 실행 O
------S---. 1 root user1  ... cat 실행 X

o Sticky bit 란 무엇인가?
디렉터리에 sticky (t)가 설정되어 있다면 
w상태여도 다른 소유권자의 파일을 삭제할 수 없다.
-rwxrwxrwx. 1 root root   <-- user1 (파일 생성 가능/삭제(남의 파일까지) 모두 삭제가 가능)
-rwxrwxrwt. 1 root root   <-- user1 (파일 생성 가능/자신의 파일만 삭제 가능)

o /etc/shadow 파일이란 어떤 파일인가? 
계정의 비밀번호가 암호화되어 저장되어 있는 파일
-복호화가 안되는 일방향 암호화(=해시 SHA512)이다.

o 일반 유저가 자신의 비밀번호를 바꾸는 명령어는 무엇인가? 
$ passwd <- /usr/bin/passwd
-rwsr-xr-x. 1 root root /usr/bin/passwd

o /etc/shadow 파일의 권한이 아래처럼 되어 있으면 일반적으로 수정이 안되는데 비밀번호를 저장할 수 있는 이유는 무엇인가?
# ll /etc/shadow
----------. 1 root root 866  1월 19 04:27 /etc/shadow
-일반유저가 $ passwd 명령어를 사용하면 /etc/shadow 이 파일에 복호화되어 내용이 저장된다. 
-이 때 /etc/shadow의 퍼미션 값이 ----------.인데도 저장이 되는 이유는
passwd 명령어의 퍼미션 값이 -rwsr-xr-x ... /usr/bin/passwd 이기 때문.
= o의 x 값과 u의 s(s-uid)이 활성화 되어 있어서.
*
/usr/bin/passwd: 비밀번호를 변경하는 명령어
/etc/shadow: 사용자의 비밀번호를 저장하는 파일


*컴파일과정 공부를 위해 gcc를 다운받는 명령어와 vim / gpt추가 공부필요
gcc(컴파일러) 다운받는 명령어 =
yum -y install gcc make gdb glibc.i686 glibc-devel.i686 libgcc.i686 libstdc++.i686 glibc glibc-devel libgcc libstdc++
vi의 확장팩 vim(vi improved) 다운받기
yum -y install vim


# vi /etc/vimrc  = vim환경 설정하기

vi 에서 o누르면 커서 밑에서 인서트
맨아랫줄에
설정 추가
set nu       = 각 줄의 왼쪽에 줄번호를 표시한다.
set bg=dark  = 백그라운드 색상을 까만색으로 한다.
set ai       = 자동 들여쓰기 활성화
set ci       = gc명령어로 주석을 간단하게 추가하거나 수정할 수 있게 허용
set sw=4     = 들여쓰기에 사용되는 공백의 너비 (=4)
set ts=4     = 탭문자의 너비를 4로 설정. 탭키가 4개의 공백문자로 대체된다.
set cursorline = 현재 커서가 위치한 줄을 강조한다. 커서가 위치한 줄에 배경이 다른색으로 보임.
set expandtab  = 탭 대신에 스페이스로 들여쓰기를 한다. 
:wp

set sw=4, set ts=4, set expandtap  
= 이 3가지 설정은 코드 스타일을 일관되게 유지하고, 가독성을 높여주기 위한 설정이다.
이 설정으로 인해 서로 설정이 다른 환경에서 코드를 입력해도 일관된 모양으로 출력이 된다.

*bash나 vim 뒤에 붙은 rc에 관해*
rc는 run commands의 약자로 초기설정과 프로그램 동작에 관련된 명령어를 실행하기 위한 .txt 파일이다.
쉽게 말해 명령어의 초기 설정에 대한 내용이 적혀 있고, 
이 파일을 이용해 이를 수정하거나 추가할 수 있다. 

# vi .bashrc
인서트
alias rm='rm -i'
alias cp='cp -i
alias mv='mv -i'
->아래에 추가
alias vi='vim'
:wp

# source .bashrc
= bash셸에 변경사항이 있을 때 새로고침해서 적용하는 명령어

# vi /etc/vimrc (에러가 있으면 들어가서 고치기 없으면 스킵)

# vi hello.c
= alias vi='vim'을 설정했으므로 hello.c라는 파일을 만들고 vim으로 편집하는창이 뜬다.

인서트(아래 내용의 c언어를 입력)
#include <stdio.h>
int main()
{
    printf("Hello world!\n");
    return 0;
}
:wq

# gcc -o hello hello.c
= c언어를 gcc를 이용해 저언어로 컴파일하는 명령어
hello.c 파일을 hello 라는 이름의 파일로.
이 때, -o 옵션은 컴파일 완료한 실행파일의 이름을 지정하는 옵션 

잘 만들어졌나 확인
# ll hello
-rwxr-xr-x. 1 root root 8360  2월 23 20:44 hello
라고 뜨면 정상입력 완료

./# file hello

# ./hello
Hello world!


[root@localhost ~]# ./hello 1> /dev/null
1> 옵션은 파일디스크립터 1번으로 재지정(>) 한다는 뜻.
파일디스크립터1은 정상출력 파일실행자로
명령어를 해석하자면 정상출력된 파일을 /dev/null로 출력한다.
이 명령어를 입력했을때 어떤 내용이 출력된다면 그 내용은 파일스크립터 1번(정상출력)을
통과하지 못했으므로 무언가 에러가 있다는 뜻.
컴파일 과정에서 고언어에 문제가 있었더라면 에러가 생겨 위 명령어에 걸렸을 것이다. 

[root@localhost ~]# ./hello 2> /dev/null
Hello world!
2> 옵션은 모든 내용이 1>과 같으나 파일디스크립터2는 에러출력 파일 실행자라는게 다르다.
즉 1과는 반대로 2>옵션을 줬을때 무언가 출력이 된다면 정상적으로 파일이 실행된다는 뜻이고
아무것도 출력되지 않는다면 파일에 에러가 있어서 /dev/null로 출력 됐다는 것이므로
파일에 에러가 있다는 뜻이 된다.

*/dev/null = 쓰레기를 보내는 공허폴더

*vi > :set noai(자동 들여쓰기 취소) 



# vi fdtest.c

#include <stdio.h>
#include <fcntl.h>	
#include <unistd.h>
#include <sys/socket.h>

int main(void)
{
    int fd1, fd2, fd3;
    FILE *fp;
    fp  = fopen("test1.txt", "w");          /* 파일 생성 */
    fd1 = open("test2.txt", O_CREAT);       /* 파일 생성 */
    fd2 = socket(PF_INET, SOCK_STREAM, 0);  /* TCP 소켓 생성 */
    fd3 = socket(PF_INET, SOCK_DGRAM, 0);   /* UDP 소켓 생성 */
    printf("두 번째 파일 디스크립터 : %d\n", fd1);
    printf("세 번째 파일 디스크립터 : %d\n", fd2);
    printf("네 번째 파일 디스크립터 : %d\n", fd3);
    sleep(60);
    fclose(fp);
    close(fd1);
    close(fd2);
    close(fd3);

    return 0;
}

# gcc -o fdtest fdtest.c
= 컴파일

# ./fdtest &
& = 현재 폴더에 있는 fdtest 파일을 백그라운드에서 실행해달라
[1] 1446 (체크)
[root@localhost ~]# 두 번째 파일 디스크립터 : 4
세 번째 파일 디스크립터 : 5
네 번째 파일 디스크립터 : 6

*생성된 파일의 디스크립터를 보면 0,1,2는 각각의 역할을 고정적으로 할당받고 있기 때문에
다음에 생성된 파일에 배치된 파일디스크립터는 3부터 시작된다는 것을 확인할 수 있다.

# ll /proc/1446(적용)/fd
이걸로 확인하기





잘됐나 확인
# ll fdtest



* &  명령어는 백그라운드에서 실행해달라는 뜻
* fd 의 의미 = 파일디스크립터
